step "deploy-settings" {
    name = "Deploy Settings"

    action {
        action_type = "Octopus.AzurePowerShell"
        properties = {
            Octopus.Action.Azure.AccountId = "azure-copilot"
            Octopus.Action.Script.ScriptBody = <<-EOT
                pushd Azure.Functions.Cli.linux-x64
                chmod +x func
                chmod +x gozip
                popd
                
                # Grant access to this dynamic worker
                WORKERIP=$(curl --silent ifconfig.net/)
                
                
                # Clear any existing rule
                EXISTING=$(az functionapp config access-restriction show -g "#{Azure.ResourceGroup.Name}" -n "#{Azure.Function.Name}" | jq -r '[.ipSecurityRestrictions[] | select(.name=="dynamicworker")] | length')
                if [[ $EXISTING -eq "1" ]]
                then
                  az functionapp config access-restriction remove -g "#{Azure.ResourceGroup.Name}" -n "#{Azure.Function.Name}" --rule-name "dynamicworker"
                fi
                
                EXISTING=$(az functionapp config access-restriction show -g "#{Azure.ResourceGroup.Name}" -n "#{Azure.Function.Name}" --slot "staging" | jq -r '[.ipSecurityRestrictions[] | select(.name=="dynamicworker")] | length')
                if [[ $EXISTING -eq "1" ]]
                then
                  az functionapp config access-restriction remove -g "#{Azure.ResourceGroup.Name}" -n "#{Azure.Function.Name}" --rule-name "dynamicworker" --slot "staging"
                fi
                
                # Allow this worker access
                az functionapp config access-restriction add -g "#{Azure.ResourceGroup.Name}" -n "#{Azure.Function.Name}" --rule-name "dynamicworker" --action Allow --ip-address ${WORKERIP} --priority 500
                az functionapp config access-restriction add -g "#{Azure.ResourceGroup.Name}" -n "#{Azure.Function.Name}" --rule-name "dynamicworker" --action Allow --ip-address ${WORKERIP} --priority 500 --slot "staging"
                
                
                cat >appsettings.json <<EOL
                [
                	{
                      "name": "FEEDBACK_SERVICE_API_KEY",
                      "value": "#{Feedback.ApiKey}",
                      "slotSetting": false
                   }
                ] 
                EOL
                
                az functionapp config appsettings set -g "#{Azure.ResourceGroup.Name}" -n "#{Azure.Function.Name}" --settings @appsettings.json 2>&1
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopusdeploy/worker-tools:6.4.0-ubuntu.22.04"
        }

        packages "Azure.Functions.Cli.linux-x64" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "Azure.Functions.Cli.linux-x64"
            properties = {
                Extract = "True"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}

process_template "deploy" {
    name = "Deploy"
    process_template_slug = "azure-function-deployment-go"
    version_mask = "2.X"

    package_parameter "Packages.FunctionApp" {
        feed = "octopus-server-built-in"
        package_id = "feedback_azure"
    }

    package_parameter "Packages.FunctionsCli" {
        feed = "octopus-server-built-in"
        package_id = "Azure.Functions.Cli.linux-x64"
    }

    parameter "Azure.Account" {
        value = "Octopus.Azure.Account"
    }

    parameter "Octopus.WorkerPool" {
        value = "WorkerPools-2688"
    }

    parameter "Octopus.ContainerImageFeed" {
        value = "Feeds-4704"
    }

    parameter "Octopus.Environment.Security" {
        value = "Environments-3023"
    }
}

process_template "security" {
    name = "Security"
    process_template_slug = "azure-function-deployment"
    version_mask = "4.X"

    package_parameter "Packages.AzureCli" {
        feed = "octopus-server-built-in"
        package_id = "Azure.Functions.Cli.linux-x64"
    }

    package_parameter "SecurityScan.Package" {
        feed = "octopus-server-built-in"
        package_id = "feedback_azure"
    }

    parameter "Azure.Account" {
        value = "Octopus.Azure.Account"
    }

    parameter "Octopus.WorkerPool" {
        value = "WorkerPools-2688"
    }

    parameter "Octopus.SecurityEnvironment" {
        value = "Environments-3023"
    }

    parameter "Octopus.ContainerImageFeed" {
        value = "Feeds-4704"
    }
}